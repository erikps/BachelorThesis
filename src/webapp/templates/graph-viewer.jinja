{% extends "base.jinja" %}

{% block title %}Graph Viewer{% endblock %}

{% block content %}

<div id="d3"></div>

<script src="https://d3js.org/d3.v4.js"></script>
<script>

    const width = 400;
    const height = 300;

    const svg = d3
        .select("#d3")
        .append("svg")
        .attr("width", width)
        .attr("height", height)
        .append("g");

    console.log(svg);

    d3.json("/api/graph", (data) => {
        // Initialize the links
        var link = svg
            .selectAll("line")
            .data(data.links)
            .enter()
            .append("line")
            .style("stroke", "#aaa");

        // Initialize the nodes
        var node = svg
            .selectAll("circle")
            .data(data.nodes)
            .enter()
            .append("circle")
            .attr("r", 20)
            .style("fill", "#69b3a2");

        // Let's list the force we wanna apply on the network
        // var simulation = d3
        // .forceSimulation(data.nodes) // Force algorithm is applied to data.nodes
        //    .force(
        //        "link",
        //        d3
        //            .forceLink() // This force provides links between nodes
        //            .id(function (d) {
        //                return d.id;
        //            }) // This provide  the id of a node
        //            .links(data.links) // and this the list of links
        //    )
        //    .force("charge", d3.forceManyBody().strength(-400)) // This adds repulsion between nodes. Play with the -400 for the repulsion strength
        //    .force("center", d3.forceCenter(width / 2, height / 2)) // This force attracts nodes to the center of the svg area
        //    .on("end", ticked);

        let simulation = d3.forceSimulation(data.nodes)
            .force("charge", d3.forceManyBody().strength(-100))
            .force("center", d3.forceCenter(width / 2, height / 2))
            .force("link", d3.forceLink().links(data.links))

        // This function is run at each iteration of the force algorithm, updating the nodes position.
        function ticked() {
            node
                .attr("cx", d => d.x)
                .attr("cy", d => d.y);

            link
                .attr("x1", d => d.source.x)
                .attr("y1", d => d.source.y)
                .attr("x2", d => d.target.x)
                .attr("y2", d => d.target.y);


        }
    });
</script>



{% endblock %}